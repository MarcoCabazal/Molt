{% if target != "xcode" %}{% assign filename_suffix = "Presenter.swift" %}{% include 'header' %}{% else %}//___FILEHEADER___{% endif %}

import UIKit

final class {{ module_name }}Presenter {

  weak var view: {{ module_name }}ViewProtocol?
  var wireframe: {{ module_name }}WireframeProtocol?
  var interactor: {{ module_name }}InteractorProtocol?
  var dataSource: [{{ model }}] = []
}

// MARK: CALLED BY VIEW
extension {{ module_name }}Presenter: {{ module_name }}PresenterProtocol {

  func viewDidLoad() {
    view?.showLoadingIndicator()
    interactor?.retrieveData()
  }

  var numberOfSection: Int { return self.dataSource.count + 1  }

  func numberOfRows(in section: Int) -> Int {
    return dataSource.count
  }

  func content(at row: Int) -> {{ model }}? {
    return dataSource[row]
  }

  func process(object: {{ model }}) {
    guard let view = view as? UIViewController else { return }
    wireframe?.navigate(to: object, from: view)
  }
}

// MARK: CALLED BY INTERACTOR
extension {{ module_name }}Presenter: {{ module_name }}InteractorOutputProtocol {

  func present(data: [{{ model }}]) {
    self.dataSource = data
    view?.hideLoadingIndicator()
    view?.render()
  }

  func present(error: Error) {
    view?.hideLoadingIndicator()
    view?.show(error: error)
  }
}
